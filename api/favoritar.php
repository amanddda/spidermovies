<?php
include('../includes/conexao.php'); // Essa linha importa o arquivo de conexÃ£o com o banco de dados. Isso Ã© essencial para que $conn funcione mais abaixo.

if (!isset($_SESSION['usuario_id'])) {
    die('NÃ£o autorizado.');
}    /*ExplicaÃ§Ã£o: verifica se a sessÃ£o contÃ©m o usuario_id.
Se nÃ£o tiver (ou seja, o usuÃ¡rio nÃ£o estÃ¡ logado), o script termina imediatamente com a mensagem "NÃ£o autorizado."
 SeguranÃ§a bÃ¡sica para evitar que alguÃ©m acesse a API diretamente.*/



$id_filme = $_POST['id_filme'];
$titulo = $_POST['titulo'];
$poster = $_POST['poster'];
$sinopse = $_POST['sinopse'];
$usuario_id = $_SESSION['usuario_id'];    /* ExplicaÃ§Ã£o:
Pega os dados que vieram via POST (geralmente de um formulÃ¡rio ou requisiÃ§Ã£o via JS) e o usuario_id da sessÃ£o.
Esses dados serÃ£o usados para:
Inserir o filme (caso ainda nÃ£o esteja na base).
Relacionar o usuÃ¡rio com o filme na tabela de favoritos.*/

$stmt = $conn->prepare("INSERT IGNORE INTO filmes (id_filme, titulo, poster, sinopse) VALUES (?, ?, ?, ?)");/*ExplicaÃ§Ã£o:
Prepara um comando SQL para inserir o filme na tabela filmes.
INSERT IGNORE Ã© usado para nÃ£o dar erro caso o id_filme jÃ¡ exista (ou seja, o filme jÃ¡ foi inserido antes).
Boa prÃ¡tica quando vocÃª quer evitar duplicidade sem causar erro.*/




$stmt->bind_param("isss", $id_filme, $titulo, $poster, $sinopse);
$stmt->execute();

/* ExplicaÃ§Ã£o:
bind_param faz a ligaÃ§Ã£o segura dos valores com a query (protege contra SQL Injection).
"isss" significa:
i â†’ inteiro (id_filme)
s â†’ string (titulo, poster, sinopse)
Depois, ele executa a query.*/



$stmt2 = $conn->prepare("INSERT INTO favoritos (usuario_id, id_filme) VALUES (?, ?)");
$stmt2->bind_param("ii", $usuario_id, $id_filme);
$stmt2->execute();
/* ExplicaÃ§Ã£o:
Aqui ele grava a relaÃ§Ã£o de favorito na tabela favoritos.
Exemplo de como essa tabela pode estar estruturada:
sql
Copiar cÃ³digo
CREATE TABLE favoritos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT,
    id_filme INT
);
Se vocÃª nÃ£o quiser que o mesmo filme seja favoritado vÃ¡rias vezes, Ã© bom colocar uma chave Ãºnica composta (UNIQUE(usuario_id, id_filme)) na tabela favoritos.*/





header("Location: ../index.php");
exit;

/*ExplicaÃ§Ã£o:
Depois de salvar tudo, redireciona o usuÃ¡rio de volta para a pÃ¡gina principal.

exit Ã© importante para parar imediatamente a execuÃ§Ã£o do script apÃ³s o redirecionamento.

 Resumo geral
Essa API:

Garante que o usuÃ¡rio esteja logado.

Salva o filme na tabela filmes (sem duplicar).

Salva o favorito na tabela favoritos.

Redireciona para o index.php.

ðŸ”§ SugestÃµes de melhoria (opcional)
ProteÃ§Ã£o contra favoritar duplicado:
Coloque isso na estrutura SQL:

sql
Copiar cÃ³digo
UNIQUE(usuario_id, id_filme)
Assim evita que o mesmo usuÃ¡rio favorite o mesmo filme mais de uma vez.

ValidaÃ§Ã£o de entrada:
Verifique se $_POST['id_filme'], $_POST['titulo'] etc. realmente existem e tÃªm dados vÃ¡lidos antes de usar.

Mensagens de erro amigÃ¡veis:
Em vez de sÃ³ redirecionar, pode exibir uma mensagem de "Filme favoritado com sucesso!" ou "Esse filme jÃ¡ foi favoritado". */

?>



